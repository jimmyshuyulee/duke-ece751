For this assignment, you will write a program "rand_story" that
generates a random story, given a story template and a list of words.

The program named "rand_story" takes three command line arguments, the 
filename of the story template, the filename of the word list, and an
integer, which is the seed for the pseudorandom number generation and
must be 1 or greater. The story template will have some blanks that
begin and end with an underscore ("_"). If the blank names a category,
your program should replace this blank with a word from the word list
of the appropriate category. If the blank has a positive integer
instead, your program should replace this blank with the word used
that many blanks ago. (If the blank is _1_, it should be filled in
with the previous word.) Your program should print the story to
stdout. 

For example, if you look at the first two lines of story.txt, you will
see:

Once upon a _time_, there was a _animal_. The _1_ lived in a very
_adjective_ _place_.

If the provided file of categories and words were:

animal:dragon
animal:cat
place:cave
time:minute
time:month
adjective:peculiar
adjective:scary
adjective:peaceful

The program might produce:

Once upon a month, there was a dragon. The dragon lived in a very
peaceful cave.

At a high level, your program should do two steps: 1) read and store
the categories and words in a data structure and 2) read the story
template, parsing each blank and selecting an appropriate word.

You are free to implement this in any way that seems reasonable to
you, but here are some choices I made:

- Create a struct category_t that that has a char * category, char **
  wordlist, and size_t n_words.
- Create a struct catarray_t that has a category_t ** catlist and a
  size_t n_cats. (Note: I chose to make the last category_t * in
  catlist contain the list of used words.)
- In main, use high-level functions
  - catarray_t * readWords(FILE * f)
  - void readStory(FILE * f, catarray_t * words)
  - void freeWords(catarray_t * words)
- For readWords, I created some helper functions, such as:
  - addWord, which adds a words to a category in a catarray_t *
  - catIndex, which returns the index of a particular category in a
    catarray_t *
  - addCat, which adds a new category to a catarray_t *
  - addWordToCat, which adds a new word to an existing category
- For readStory, I created some helper functions, such as:
  - parseLine, which handles one line read from the template file
  - replaceBlank, which replaces a single blank with the appropriate
    word
- To generate a random number between 0 and RAND_MAX, see "man random"

If you test your program using the given sample files:
./rand_story story.txt words.txt 1
you should get the output in output.txt.

Of course, you should test your program on more inputs than just
these, making sure it handles a variety of invalid inputs by printing
an appropriate error message and exiting failure. As always, it should
valgrind cleanly for full credit.

Note that your program MUST be compilable with the provide Makefile.
You may not change this Makefile.